@page "/"
@using System.Net.Http
@using BitcoinChallenge.Entities;
@using Newtonsoft.Json;
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILiffClient Liff

    <div class="card" style="width: 20rem;">
        <h5 class="card-title">Current price of one bitcoin</h5>
        <p>@FormattedPrice</p>
    </div>

@code{
    private const string BitcoinPriceProvider = "https://api.coinbase.com/v2/prices/spot?currency=EUR";

    protected decimal Price { get; set; }
    protected string FormattedPrice => string.Format("€{0:N2}", this.Price);

    protected override async Task OnInitializedAsync() {
        try {
            this.Price = await this.fetchPrice();
            this.startPeriodicRefresh();
        }
        catch (Exception e) {
            await JSRuntime.InvokeAsync<object>("alert", e.ToString());
        }
    }

    private void startPeriodicRefresh() {
        TimeSpan startTimeSpan = TimeSpan.Zero;
        TimeSpan periodTimeSpan = TimeSpan.FromSeconds(10);

        var timer = new System.Threading.Timer(async (e) => {
            this.Price = await this.fetchPrice();
        }, null, startTimeSpan, periodTimeSpan);
    }

    private async Task<decimal> fetchPrice() {
        HttpResponseMessage priceResponse = await Http.GetAsync(BitcoinPriceProvider);
        priceResponse.EnsureSuccessStatusCode();
        string responseBody = await priceResponse.Content.ReadAsStringAsync();
        BitcoinPriceWrapper bitcoinPriceWrapper = JsonConvert.DeserializeObject<BitcoinPriceWrapper>(responseBody);
        Console.WriteLine("### " + bitcoinPriceWrapper.Data.Amount);
        return decimal.Parse(bitcoinPriceWrapper.Data.Amount);
    }
}
